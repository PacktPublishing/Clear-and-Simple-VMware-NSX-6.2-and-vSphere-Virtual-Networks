WEBVTT

00:00.510 --> 00:08.270
In this video I'll explain some of the fundamentals of the NSX logical switch and how it can enhance

00:09.200 --> 00:15.100
traffic optimization compared to vse for a distributed switch or a fair standard switch.

00:16.900 --> 00:18.670
So what is a logical switch.

00:18.670 --> 00:25.060
Well we've had a Vee's for distributed switching of VSE for standard switch that are part of the sphere.

00:25.240 --> 00:28.680
This is a new type of virtual switch.

00:29.610 --> 00:38.290
And the logical switch is as kind of the next step in the phrase and the logical switch is really the

00:38.290 --> 00:43.090
next step in the evolution from standard to distributed.

00:43.090 --> 00:50.860
And now from distributed to our NSX logical switch and what is really going to do is add functionality

00:51.040 --> 00:55.210
on top of a distributed virtual switch with NSX.

00:55.210 --> 00:58.440
We're still going to need the distributed virtual switch.

00:58.480 --> 01:01.890
We're not going to completely abandon that.

01:01.960 --> 01:05.850
Now the logical switch is based on a kernel module.

01:06.120 --> 01:08.270
What it is is a distributed switch.

01:08.340 --> 01:17.140
With this additional capability called VX LAN it's based on the Vee's for distributed switch.

01:17.260 --> 01:23.290
It's backed by Vee's for a distributed switch and it's going to use the physical adapters associated

01:23.290 --> 01:24.830
with the VSE for a distributed switch

01:28.420 --> 01:37.490
are logical switches will not use violence so prior to creating a logical switch you'll establish a

01:37.490 --> 01:46.480
pool of what are called VX LAN network identifiers or V.N. eyes and our villainize are going to start

01:46.780 --> 01:48.090
at 5000.

01:48.220 --> 01:57.700
That way they're easy to distinguish from villans and each VNA serves as a logical identifier for a

01:57.700 --> 02:02.930
logical switch.

02:02.930 --> 02:09.650
Now one of the components that we're going to require for this VX Slan encapsulation is something called

02:09.650 --> 02:19.600
the V-Tech tap has a special VM kernel port specifically for VX LAN functions and it provides VX same

02:19.640 --> 02:24.940
encapsulation and de-caf solution.

02:25.180 --> 02:30.290
And we can create a logical switch that will even span multiple distributed switches and in a couple

02:30.310 --> 02:35.980
slides will start taking a look at some diagrams and a lot of this will probably become a lot more clear

02:36.280 --> 02:38.370
as we work through a few of the pictures.

02:41.950 --> 02:48.220
So really quickly before we get to our pictures let's talk about VX land a little bit now VX Slan is

02:48.220 --> 02:56.280
going to give you a tunnelled transport across the physical network and this provides certain benefits.

02:56.410 --> 03:05.770
The most significant of which is that you can create a layer to network that spans a layer 3 device.

03:05.870 --> 03:13.640
You can also provide logical segmentation using Vienna is similar to the way we create logical segmentation

03:13.700 --> 03:16.410
with villans OK.

03:16.420 --> 03:21.960
So let's take a look at a diagram and hopefully that will make these concepts a lot more clear.

03:24.250 --> 03:31.510
So in this diagram what we see at the top of our screen a distributed portrait and maybe that distributed

03:31.510 --> 03:38.610
port group is configured for some the land and that land has virtual machines on it with the address

03:38.610 --> 03:43.090
range of 1 9 2 1 6 8 1 0.

03:43.440 --> 03:50.810
So let's say that in this case this is veel and that and now I've got multiple virtual machines running

03:50.810 --> 04:00.130
on different ESX I hosts each one of those green blocks represents an ESX I host so you get VM one VM

04:00.130 --> 04:09.210
to VM three and VM for that are all connected to the same distributed switch and then on the bottom

04:09.210 --> 04:17.830
we've got our actual physical network that's used to interconnect these ESX hosts so we have four ESX

04:17.980 --> 04:22.660
hosts two of them are connected by a switch and then there's a router in the middle and the other two

04:22.660 --> 04:26.430
hosts are connected by a different physical switch.

04:28.380 --> 04:33.730
Ok so now let's talk about what happens when we issue in our request in this scenario.

04:34.110 --> 04:41.730
So like I mentioned VM one VM to VM 3 and VM four are all connected to port groups and is Vee's for

04:41.730 --> 04:43.500
a distributed switch.

04:43.500 --> 04:54.110
And let's say that VM one wants to ping VM for what will happen in that situation is a VM one will issue

04:54.110 --> 05:03.590
and ARP request if it doesn't know the MAC address of VM for a VM one tries to ping this IP 1 9 2 1

05:03.590 --> 05:09.340
6 8 that one dot 13 but it doesn't know the destination MAC address.

05:09.340 --> 05:15.690
It'll create a layer to broadcast call then our request.

05:15.730 --> 05:23.860
So here comes my ARP request from VM one right and it hits the physical switch and the destination MAC

05:23.860 --> 05:25.590
address is all AFP's.

05:25.600 --> 05:28.450
Right that's my broadcast MAC address.

05:28.450 --> 05:33.380
And so what the physical switches going to do as it's going to receive that broadcast and it will flood

05:33.390 --> 05:37.000
it out all ports on that either that switch.

05:37.000 --> 05:37.150
Right.

05:37.150 --> 05:44.590
So here's my request will eventually hit virtual machine to but we're not looking for the MAC address

05:44.650 --> 05:49.000
of $192 168 not one dot 11.

05:49.030 --> 05:57.360
So this virtual machine will essentially ignore that ARP request and the physical switch will also flood

05:58.720 --> 06:08.630
the broadcast frame out it's interface that's connected to our router here and what does a router do

06:08.780 --> 06:12.540
with a lever to broadcast.

06:12.550 --> 06:14.630
Don't pass lead to broadcasts.

06:14.680 --> 06:23.800
So that's the end of my ARP request and the our request never makes it to VM for therefore V.M. one

06:23.800 --> 06:31.390
is unable to discover the IP addresses of anything connected to this distributed switch.

06:32.120 --> 06:42.280
On the other side of that router and that's why these for distributed switch requires Leor to transport

06:43.100 --> 06:44.550
a VSE for a distributed switch.

06:44.550 --> 06:45.640
Can't do this.

06:45.640 --> 06:50.090
It can't span multiple hosts that are separated by a router.

06:50.110 --> 06:51.090
Doesn't work right.

06:56.370 --> 07:06.810
Now let's look at the same diagram but let's replace the distributed port group with a logical switch.

07:06.820 --> 07:20.850
So again VM one VM to VM 3 and VM for all in the same network are 1 9 2 1 6 8 1 10 11 12 and 13.

07:21.730 --> 07:23.920
That's the network that these VAMC are connected to.

07:25.920 --> 07:34.120
So welders notate that network here find the logic switch and he's added the network and let's say in

07:34.120 --> 07:37.790
this scenario VM one wants to ping VM for.

07:37.900 --> 07:44.170
But again VM one doesn't know the destination MAC really knows the IP address and wants to hit but it

07:44.170 --> 07:47.070
does not know the destination MAC address.

07:47.110 --> 07:53.260
So in order to discover that destination MAC address VM one is going to issue a broadcast and ARP request

07:54.250 --> 08:03.330
and that ARP request is going to hit this V-Tech and the VTEC now has the capability of saying here's

08:03.330 --> 08:05.320
a letter to broadcast.

08:05.370 --> 08:05.640
Right.

08:05.640 --> 08:13.330
This is a letter to broadcast that needs to be received by everything connected to this logical switch.

08:14.340 --> 08:23.640
So what the tap will do is it'll encapsulate that broadcast and it will send a copy of it to the tap

08:24.150 --> 08:29.400
which is just a VM kernel port that runs on each and every ESX I host.

08:29.400 --> 08:32.410
That's part of this logical switch.

08:33.230 --> 08:38.040
And I know they're not pictured here but this whole still have a VM kernel part that's VTEC.

08:38.150 --> 08:45.730
And this this hosta all VM kernel port that's acting as if he tap and our host on the far right as a

08:45.730 --> 08:49.580
VM kernel port that X has a V.

08:50.770 --> 08:52.820
So it's the job of the source.

08:52.880 --> 08:55.760
V-Tech over here on the far left.

08:55.990 --> 08:57.560
It's the job of the source.

08:57.580 --> 09:04.440
V-Tech to now receive that Lehre to broadcast and it'll take it.

09:04.440 --> 09:11.460
It will wrap it up with a new set of outer headers or new source and destination IP new source in this

09:11.460 --> 09:11.940
nation.

09:11.970 --> 09:13.850
Mac right.

09:13.910 --> 09:22.070
It will create a new set of headers and put them on the front of that frank the original frame and all

09:22.070 --> 09:26.810
of the original addressing still stays intact in the original frame is still there.

09:27.920 --> 09:33.860
The tap is simply putting an additional set of headers on the outside of the frame.

09:34.090 --> 09:40.600
All of our outer Hetter and the purpose of those headers is to essentially this tab is going to ship

09:40.600 --> 09:49.050
a copy of that broadcast to this V-Tech and when it hits this time it'll hit these VM and the VM does

09:49.050 --> 09:51.380
not match our request.

09:52.500 --> 10:04.790
And here comes that Lehre to broadcast in the form of an IP unicast bound for this V tap over here.

10:07.060 --> 10:16.360
So in this case our router is going to see IP unicast traffic destined for $172 60 not 10 that 10.

10:16.410 --> 10:20.880
This is not Alair to broadcast as far as the router can tell.

10:21.030 --> 10:26.010
It will pass that packet out the appropriate pour on the router towards the physical switch.

10:27.100 --> 10:36.010
And it will arrive at the to and the tap will strip away those outer headers exposing the original frame

10:36.010 --> 10:44.460
again with the original source and destination IP and Mac which was our up broadcast frame and that

10:44.460 --> 10:53.430
broadcast frame will arrive at V.M. 4 and V.M. 4 can then generate in our response.

10:53.660 --> 11:01.400
So that's how the logical switch is really very different than a distributed switch because the logical

11:01.400 --> 11:06.230
switch doesn't care about the underlying physical network.

11:06.350 --> 11:15.280
We can put as many routers in the middle as we want and we can still maintain one layer to segment across

11:15.280 --> 11:19.860
all of these ESX hosts even though they're separated by a router.

11:22.600 --> 11:29.610
So in review our logical switches are mapped to Vienna instead of villans they're going to use a VX

11:29.610 --> 11:32.530
LAN network identifier.

11:32.550 --> 11:41.250
Now one thing I didn't mention is that the maximum transmission unit on our physical network is sixteen

11:41.250 --> 11:42.570
hundred minimum.

11:43.360 --> 11:49.050
Let's back up to that last slide and let me explain why OK.

11:49.540 --> 11:53.900
So let's say again virtual machine one generates and ARP request.

11:54.140 --> 12:00.430
When that our request arrives at the tap one of the thing that's going to happen is the original frame.

12:00.430 --> 12:07.210
Let's call this the original frame with the original headers is going to get encapsulated with a new

12:07.210 --> 12:08.990
set of headers.

12:09.100 --> 12:09.560
Right.

12:09.650 --> 12:16.850
That's the job of the VTEC is essentially to say here's a new destination IP address and the new destination

12:16.880 --> 12:22.760
IP addresses the IP address of the tap over here.

12:22.880 --> 12:27.150
So it's going to append a new set of headers on the front of that frame.

12:27.150 --> 12:27.570
All right.

12:27.800 --> 12:35.360
And maybe that frame had a frame size that was like 15:24 or something like that a pretty standard Ethan

12:35.420 --> 12:36.910
frame size.

12:36.950 --> 12:43.950
Well one of these additional headers are put on top of that the size of the frame increases.

12:44.050 --> 12:52.420
And if the physical switch isn't properly configured to handle a frame that large it'll have to break

12:52.420 --> 12:56.920
it up into multiple pieces and do what's called fragmentation and reassembly.

12:57.180 --> 13:04.240
Right and if you're not really familiar with that concept go back and watch the MTV Video towards the

13:04.240 --> 13:05.960
beginning of this course.

13:06.830 --> 13:14.030
So that's why we have to have a higher MT you the physical network because we're creating additional

13:14.030 --> 13:20.390
headers with VX land that are going to increase the size of a frame and we don't want the frame to be

13:20.390 --> 13:23.290
larger than the empty view of the physical network.

13:26.340 --> 13:28.050
So the minimum required.

13:28.050 --> 13:37.340
MT You on the physical network is going to be 6500 that's on the underlying network or the NSX implementation

13:37.340 --> 13:40.630
of VX LAN uses UDP port 84 72.

13:40.850 --> 13:47.420
That's different than the standard VX LAN port used by other vendors.

13:47.450 --> 13:53.270
And finally we have this concept the transport zones and we're going to talk more about this in upcoming

13:53.270 --> 13:54.190
lessons.

13:54.320 --> 14:01.310
But I do just want to take a moment to introduce the concept of a transport zone at this point a transport

14:01.310 --> 14:09.530
zone identifies the scope of the logical switch will create transport zones that include multiple clusters

14:09.530 --> 14:10.710
of hosts.

14:10.910 --> 14:16.770
And when you create a logical switch you actually created something called the transport zone and the

14:16.770 --> 14:24.240
logical switch will span all of the hosts and clusters identified in that transport so so much more

14:24.240 --> 14:25.220
on that later.

14:25.440 --> 14:27.900
But I just wanted to introduce that term at this point.
